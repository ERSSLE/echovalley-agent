"""
1/ 【问题判别器】问题判别：直接回答 or 推理回答
2/ 【规划器】问题路径规划，对于需要逐步推理的回答进行解决路径规划

3/ 【推理器】根据规划路径确定下一步提示，或者退出。
        环境观察1+计划1+下一步提示1+执行器反馈1+环境观察2 ==（原问题指导）==> 根据执行器反馈获得解答+计划2+下一步提示2+任务完成状态

4/ 【执行器】根据新的提示，提问llm，获得回复
        环境观察2 + 计划2 +下一步提示2 ===> 回复（可能带有tool_calls）
5/ 【执行器】如果有工具调用，执行调用，并获得结果
        tool_calls ===> 执行器反馈2 + 环境观察3
   【4-5】步骤的对话历史[(观察,计划,提示),(LLM response),(tool反馈),(新观察)]

6/ 【回答器】构建 原问题,最终计划,[(下一步提示, 执行器反馈获得的解答),...]的记录，形成最终答案
"""
from datetime import datetime
def get_date():
    return datetime.today().strftime('%F')

system_template = """今天日期是：{datestr}，请严格遵循指令回答问题或选择调用工具。\
    当检索网络信息时，尽可能使用bing工具，相对于browser的灵活性及易出错，bing直接检索到有价值的内容概率更高。\
        当然，在bing无法满足要求或需要网页交互操作时，请务必使用browser"""

judge_template = ("根据用户提问，判断该问题是否可以直接回答，你判断的依据是："
                         "1> 该问题是否具有时效性，如果涉及时效性，则需要通过推理调用工具获取额外信息。今天日期（其格式为%Y-%m-%d，但不涉及其它信息）系统会自动获取，不需要工具。"
                         "2> 该问题是否需要复杂的推理过程回答，如果推理过程简单或不需要推理可以通过LLM直觉给出答案则回答否，只有需要特别复杂推理过程的问题才回答是"
                         "\n问题：{query}\n"
                         """以上条件只要有一个回答“是”,最终结果就是“是”，否则回答“否”，你的回答结果应该明确而简洁。请返回json格式结果：```json {{"answer": "是/否"}}```"""
                         )
plan_template = ("以下问题LLM不能通过直觉给出答案，可能涉及到复杂推理或工具调用。"
                 "请制定出一个详细的解决方案，该方案应该条理清晰明确但同时必须简洁。这里不需要实际调用工具。"
                 "在该解决方案最后一步应该基于前面所有步骤的结果形成一个对原始查询或问题的完整答案。"
                 "\n问题：{query}\n"
                 "你的解决方案格式如下:\n"
                 "【解决方案】\n第1步:\n第2步:\n第3步:\n......"
                 )

reasoning_template = """根据对话中的原问题，消息反馈以及获得的对运行环境的新的观察，完成以下2个互相关联的任务。
1> 评估当前计划执行情况
2> 生成下一步提示，该提示将指导下一步行为，这里不需要实际调用工具。该提示在后续执行中可能指导调用工具，也可能不涉及工具而是指导信息的提取、整合或推理。\
    基于评估在完成全部计划步骤与原查询/任务时，该提示给出“退出”指令。

你应该始终严格按照如下JSON格式输出你的回复。
其中current_situation指的是第1>步的结果，next_prompt指的是第2>步的下一步提示。

```json
{{
"current_situation":
"next_prompt":
}}
```
"""
result_template = """根据以上对话历史针对原问题，基于对话事实生成一个完整详实的回答。
"""

exec_template = """{next_prompt}"""

generate_template = """{query}"""
